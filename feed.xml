<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://sungrinhan.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://sungrinhan.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-04-24T13:34:05+00:00</updated><id>https://sungrinhan.github.io/feed.xml</id><title type="html">성린s 메모장</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Redux Toolkit을 활용한 효율적인 상태관리 블로그 제목: Redux Toolkit 활용: 쉽고 빠른 상태 관리를 위한 해법</title><link href="https://sungrinhan.github.io/blog/2025/redux-toolkit%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%83%81%ED%83%9C%EA%B4%80%EB%A6%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%A0%9C%EB%AA%A9-redux-toolkit-%ED%99%9C%EC%9A%A9-%EC%89%BD%EA%B3%A0-%EB%B9%A0%EB%A5%B8-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%95%B4%EB%B2%95/" rel="alternate" type="text/html" title="Redux Toolkit을 활용한 효율적인 상태관리 블로그 제목: Redux Toolkit 활용: 쉽고 빠른 상태 관리를 위한 해법"/><published>2025-04-24T13:32:39+00:00</published><updated>2025-04-24T13:32:39+00:00</updated><id>https://sungrinhan.github.io/blog/2025/redux-toolkit%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%83%81%ED%83%9C%EA%B4%80%EB%A6%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%A0%9C%EB%AA%A9:-redux-toolkit-%ED%99%9C%EC%9A%A9:-%EC%89%BD%EA%B3%A0-%EB%B9%A0%EB%A5%B8-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%95%B4%EB%B2%95</id><content type="html" xml:base="https://sungrinhan.github.io/blog/2025/redux-toolkit%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%83%81%ED%83%9C%EA%B4%80%EB%A6%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%A0%9C%EB%AA%A9-redux-toolkit-%ED%99%9C%EC%9A%A9-%EC%89%BD%EA%B3%A0-%EB%B9%A0%EB%A5%B8-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%95%B4%EB%B2%95/"><![CDATA[<p>블로그 내용:</p> <p>Redux Toolkit은 Redux의 ‘공식 방법’으로 사실상 Redux의 요구사항을 단순화 합니다. Redux Toolkit을 사용하면 당신은 액션 타입, 액션 생성자 함수, 리듀서 함수를 직접 작성할 필요가 없습니다. 대신 <code class="language-plaintext highlighter-rouge">createSlice()</code>라는 Redux Toolkit 함수를 사용하여 이 모든 것들을 한 번에 생성할 수 있습니다.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createSlice</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@reduxjs/toolkit</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">counterSlice</span> <span class="o">=</span> <span class="nf">createSlice</span><span class="p">({</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">counter</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">initialState</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="na">reducers</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">increment</span><span class="p">:</span> <span class="nx">state</span> <span class="o">=&gt;</span> <span class="nx">state</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
    <span class="na">decrement</span><span class="p">:</span> <span class="nx">state</span> <span class="o">=&gt;</span> <span class="nx">state</span> <span class="o">-</span> <span class="mi">1</span>
  <span class="p">}</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kd">const</span> <span class="p">{</span> <span class="nx">actions</span><span class="p">,</span> <span class="nx">reducer</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">counterSlice</span>
</code></pre></div></div> <p>위의 코드에서 리듀서 함수는 더 이상 불변성을 직접 관리할 필요가 없습니다. Redux Toolkit은 ‘Immer’라는 라이브러리를 내부적으로 사용하여 불변성을 자동으로 처리합니다.</p> <p>이제 실무에서 어떻게 활용할 수 있을지 알아봅시다. Redux Toolkit은 비동기 작업 처리를 위한 <code class="language-plaintext highlighter-rouge">createAsyncThunk</code> 함수를 제공합니다.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createAsyncThunk</span><span class="p">,</span> <span class="nx">createSlice</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@reduxjs/toolkit</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">axios</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">axios</span><span class="dl">'</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">fetchUserById</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span><span class="dl">'</span><span class="s1">users/fetchByIdStatus</span><span class="dl">'</span><span class="p">,</span> <span class="k">async </span><span class="p">(</span><span class="nx">userId</span><span class="p">,</span> <span class="nx">thunkAPI</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">axios</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s2">`/api/users/</span><span class="p">${</span><span class="nx">userId</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
  <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span>
<span class="p">})</span>

<span class="kd">const</span> <span class="nx">usersSlice</span> <span class="o">=</span> <span class="nf">createSlice</span><span class="p">({</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">users</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">initialState</span><span class="p">:</span> <span class="p">{},</span>
  <span class="na">reducers</span><span class="p">:</span> <span class="p">{},</span>
  <span class="na">extraReducers</span><span class="p">:</span> <span class="p">{</span>
    <span class="p">[</span><span class="nx">fetchUserById</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">state</span><span class="p">[</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">usersSlice</span><span class="p">.</span><span class="nx">reducer</span>
</code></pre></div></div> <p>위의 코드에서 <code class="language-plaintext highlighter-rouge">createAsyncThunk</code>는 Promise를 반환하는 함수를 인자로 받습니다. 이 함수 내에서는 서버로 데이터를 가져오거나, 저장하는 등의 비동기 작업을 처리하면 됩니다. 또한 <code class="language-plaintext highlighter-rouge">extraReducers</code>는 단일 액션 타입에 따라 여러 리듀서들을 실행할 수 있게 해줍니다.</p> <p>응용 버전을 살펴보면, 복잡한 상태 객체를 관리하는 상황에서도 Redux Toolkit을 효과적으로 활용할 수 있습니다.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createSlice</span><span class="p">,</span> <span class="nx">createAsyncThunk</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@reduxjs/toolkit</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">axios</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">axios</span><span class="dl">'</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">fetchCommentsByPostId</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span><span class="dl">'</span><span class="s1">comments/fetchByPostIdStatus</span><span class="dl">'</span><span class="p">,</span> <span class="k">async </span><span class="p">(</span><span class="nx">postId</span><span class="p">,</span> <span class="nx">thunkAPI</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">axios</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s2">`/api/posts/</span><span class="p">${</span><span class="nx">postId</span><span class="p">}</span><span class="s2">/comments`</span><span class="p">)</span>
  <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span>
<span class="p">})</span>

<span class="kd">const</span> <span class="nx">commentsSlice</span> <span class="o">=</span> <span class="nf">createSlice</span><span class="p">({</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">comments</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">initialState</span><span class="p">:</span> <span class="p">{},</span>
  <span class="na">reducers</span><span class="p">:</span> <span class="p">{},</span>
  <span class="na">extraReducers</span><span class="p">:</span> <span class="p">{</span>
    <span class="p">[</span><span class="nx">fetchCommentsByPostId</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nx">comment</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">state</span><span class="p">[</span><span class="nx">comment</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">comment</span>
      <span class="p">})</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">commentsSlice</span><span class="p">.</span><span class="nx">reducer</span>
</code></pre></div></div> <p>위의 코드에서는 포스트 ID로 댓글들을 가져와서 상태에 저장하는 시나리오를 보여줍니다. <code class="language-plaintext highlighter-rouge">fetchCommentsByPostId</code>라는 비동기 액션을 통해 서버에서 데이터를 가져온 후, 이를 상태에 반영하는 부분은 <code class="language-plaintext highlighter-rouge">extraReducers</code>를 통해 처리합니다.</p> <p>Redux Toolkit은 익히면 Redux 코드를 훨씬 더 간결하고 명확하게 만들 수 있는 도구입니다. 기본적인 사용법부터 비동기 작업 처리, 복잡한 상태 관리까지 쉽게 해결할 수 있으므로, 실무에서 많이 활용하게 될 것입니다.</p>]]></content><author><name></name></author><category term="프론트엔드"/><category term="Redux"/><summary type="html"><![CDATA[블로그 내용:]]></summary></entry><entry><title type="html">웹 프론트엔드 기초 정리</title><link href="https://sungrinhan.github.io/blog/2025/%EC%9B%B9-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B8%B0%EC%B4%88-%EC%A0%95%EB%A6%AC/" rel="alternate" type="text/html" title="웹 프론트엔드 기초 정리"/><published>2025-04-24T13:29:50+00:00</published><updated>2025-04-24T13:29:50+00:00</updated><id>https://sungrinhan.github.io/blog/2025/%EC%9B%B9-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B8%B0%EC%B4%88-%EC%A0%95%EB%A6%AC</id><content type="html" xml:base="https://sungrinhan.github.io/blog/2025/%EC%9B%B9-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B8%B0%EC%B4%88-%EC%A0%95%EB%A6%AC/"><![CDATA[<hr/> <h1 id="웹-프론트엔드-기초-정리">웹 프론트엔드 기초 정리</h1> <p>웹 프론트엔드는 사용자와 직접적으로 만나고 상호작용하는 웹사이트의 중요한 부분입니다. 이를 구성하는 주요 기술로는 HTML, CSS, 그리고 JavaScript가 있습니다.</p> <p>HTML (HyperText Markup Language)은 웹페이지의 기본적인 구조를 작성하는 언어입니다. 웹페이지의 제목, 단락, 표, 이미지 등의 요소를 정의하고 구조화합니다. 사용하는 기본 태그 형태로는 <code class="language-plaintext highlighter-rouge">&lt;tag attribute="value"&gt; 내용 &lt;/tag&gt;</code>와 같습니다.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;title&gt;</span>웹 페이지 제목<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        <span class="nt">&lt;h1&gt;</span>첫 번째 제목<span class="nt">&lt;/h1&gt;</span>
        <span class="nt">&lt;p&gt;</span>첫 번째 단락<span class="nt">&lt;/p&gt;</span> 
    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div> <p>CSS (Cascading Style Sheets)는 HTML로 작성한 웹페이지의 디자인을 꾸미는 언어입니다. 기본적인 스타일 지정 형태로는 <code class="language-plaintext highlighter-rouge">selector {property: value;}</code>와 같습니다.</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">body</span> <span class="p">{</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="no">lightblue</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">h1</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">navy</span><span class="p">;</span>
    <span class="nl">margin-left</span><span class="p">:</span> <span class="m">30px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>JavaScript는 웹페이지에 동적인 요소를 추가하는 언어입니다. 사용자와 상호작용하거나 웹페이지가 Live 업데이트 되게 하거나 다양한 웹 기능을 구현할 때 사용됩니다.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">changeBackgroundColor</span><span class="p">()</span> <span class="p">{</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">green</span><span class="dl">"</span><span class="p">;</span>
    <span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">배경색이 변경되었습니다.</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>실무에서는 이 외에도 프레임워크와 라이브러리를 활용하여 더욱 효과적인 웹 개발이 이루어집니다. 자주 사용되는 예로는 React, Vue, Angular 등이 있습니다.</p> <p>특히, 추천하고 싶은 웹 프론트엔드 꿀팁은 “DevTools를 적극 활용하라”입니다. 대부분의 웹 브라우저는 개발자 도구(DevTools)를 지원하며, 이를 활용하면 HTML, CSS, JavaScript 요소를 실시간으로 확인하고 조정하면서 진행할 수 있습니다.</p> <hr/> <p>응용 버전 예시로는, HTML/CSS/JavaScript를 활용한 간단한 디지털 시계 기능을 소개하겠습니다.</p> <p>먼저 HTML 파일에서는 시간을 표시할 <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> 태그를 준비합니다.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"clock"</span><span class="nt">&gt;&lt;/div&gt;</span>
</code></pre></div></div> <p>CSS 파일에서는 디지털 시계의 디자인을 정의합니다.</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">#clock</span> <span class="p">{</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">60px</span><span class="p">;</span>
    <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
    <span class="nl">margin-top</span><span class="p">:</span> <span class="m">20%</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>그리고 JavaScript에서는 현재 시간을 가져와서 <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> 태그 안에 표시하는 기능을 구현합니다.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">clock</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">hours</span> <span class="o">=</span> <span class="nx">date</span><span class="p">.</span><span class="nf">getHours</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">minutes</span> <span class="o">=</span> <span class="nx">date</span><span class="p">.</span><span class="nf">getMinutes</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">seconds</span> <span class="o">=</span> <span class="nx">date</span><span class="p">.</span><span class="nf">getSeconds</span><span class="p">();</span>
    <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">clock</span><span class="dl">"</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">hours</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">:</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">minutes</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">:</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">seconds</span><span class="p">;</span>
<span class="p">}</span>
<span class="nf">setInterval</span><span class="p">(</span><span class="nx">clock</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span> <span class="c1">// 1초마다 새로고침</span>
</code></pre></div></div> <p>웹 페이지를 열면, JavaScript가 현재 시간을 가져와서 HTML의 <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> 태그 안에 출력하며, CSS가 이를 디자인합니다. 이런 식으로 HTML, CSS, JavaScript가 서로 상호작용하며 웹 페이지를 구성하는 것이 바로 프론트엔드의 중심적인 역할입니다.</p> <p>웹 프론트엔드 개발은 많은 학습과 실습을 필요로 하지만, 그만큼 매력적이고 보람찬 분야입니다. 기초부터 차근차근 배워나가며 훌륭한 프론트엔드 개발자가 되길 바랍니다.</p>]]></content><author><name></name></author><category term="프론트엔드"/><category term="웹"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Middleware in Redux : 효율적인 비동기 작업과 디버깅을 위한 필수 요소</title><link href="https://sungrinhan.github.io/blog/2025/middleware-in-redux-middleware-in-redux-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%9E%91%EC%97%85%EA%B3%BC-%EB%94%94%EB%B2%84%EA%B9%85%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%95%84%EC%88%98-%EC%9A%94%EC%86%8C/" rel="alternate" type="text/html" title="Middleware in Redux : 효율적인 비동기 작업과 디버깅을 위한 필수 요소"/><published>2025-04-22T15:09:22+00:00</published><updated>2025-04-22T15:09:22+00:00</updated><id>https://sungrinhan.github.io/blog/2025/middleware-in-redux-middleware-in-redux-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%9E%91%EC%97%85%EA%B3%BC-%EB%94%94%EB%B2%84%EA%B9%85%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%95%84%EC%88%98-%EC%9A%94%EC%86%8C</id><content type="html" xml:base="https://sungrinhan.github.io/blog/2025/middleware-in-redux-middleware-in-redux-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%9E%91%EC%97%85%EA%B3%BC-%EB%94%94%EB%B2%84%EA%B9%85%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%95%84%EC%88%98-%EC%9A%94%EC%86%8C/"><![CDATA[<p><strong>Middleware in Redux: 효율적인 비동기 작업과 디버깅을 위한 필수 요소</strong></p> <p>Redux에서의 middleware는 액션을 dispatch 하여 리듀서에서 이를 처리하기 전의 중간 공간을 의미합니다. 즉, 액션이 특정 작업을 처리하는 도중에 원하는 동작을 삽입할 수 있게 해줍니다. 이는 비동기 작업을 처리하거나, 특정 조건에 따라 액션을 무시하거나, 콘솔에 로그를 출력하거나, 서버 API 호출 등과 같은 사용자 정의 작업을 적용하는 데 특히 유용합니다.</p> <p>Redux middleware를 구현하려면, 다음과 같은 패턴의 함수를 작성해야 합니다.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myMiddleware</span> <span class="o">=</span> <span class="nx">store</span> <span class="o">=&gt;</span> <span class="nx">next</span> <span class="o">=&gt;</span> <span class="nx">action</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// 여기서 미들웨어 로직을 작성할 수 있습니다.</span>
    <span class="k">return</span> <span class="nf">next</span><span class="p">(</span><span class="nx">action</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div> <p>store는 리덕스 스토어 인스턴스이며, next는 처리할 다음 미들웨어를 가리킵니다. 만약 다음 미들웨어가 없다면 리듀서를 가리킵니다.</p> <p>다음은 실제로 Redux 미들웨어를 적용하는 방법입니다.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createStore</span><span class="p">,</span> <span class="nx">applyMiddleware</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">redux</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">rootReducer</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./reducers</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">myMiddleware</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./middleware/myMiddleware</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nf">createStore</span><span class="p">(</span>
    <span class="nx">rootReducer</span><span class="p">,</span>
    <span class="nf">applyMiddleware</span><span class="p">(</span><span class="nx">myMiddleware</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div> <p>따라서 다음과 같이 action 객체를 dispatch하면, 리듀서로 전달되기 전에 미들웨어에서 처리됩니다.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">store</span><span class="p">.</span><span class="nf">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">MY_ACTION</span><span class="dl">'</span> <span class="p">});</span>
</code></pre></div></div> <p>실무에서는 대표적으로 Redux-Thunk, Redux-Saga와 같은 라이브러리를 사용하여 비동기 작업을 처리합니다. 이들은 모두 미들웨어의 형태로 제공되며, 액션 생성기(action creator) 안에서 비동기 작업을 할 수 있게 해줍니다. 그렇기 때문에 더 복잡한 비동기 작업을 쉽게 관리할 수 있습니다.</p> <p>그리고 미들웨어는 리덕스 개발 도구와 같은 디버깅 작업에도 이용됩니다. 예를 들어, 액션이 발생할 때마다 상태 변화를 콘솔에 출력하거나, 서버와의 API 통신 내용을 기록하려면 다음처럼 미들웨어를 작성할 수 있습니다.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">loggerMiddleware</span> <span class="o">=</span> <span class="nx">store</span> <span class="o">=&gt;</span> <span class="nx">next</span> <span class="o">=&gt;</span> <span class="nx">action</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="nx">action</span> <span class="o">&amp;&amp;</span> <span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">);</span> <span class="c1">// action type으로 log를 그룹화함</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">이전 상태</span><span class="dl">'</span><span class="p">,</span> <span class="nx">store</span><span class="p">.</span><span class="nf">getState</span><span class="p">());</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">액션</span><span class="dl">'</span><span class="p">,</span> <span class="nx">action</span><span class="p">);</span>
    <span class="nf">next</span><span class="p">(</span><span class="nx">action</span><span class="p">);</span> <span class="c1">// 다음 미들웨어, 없으면 리듀서에게 전달</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">다음 상태</span><span class="dl">'</span><span class="p">,</span> <span class="nx">store</span><span class="p">.</span><span class="nf">getState</span><span class="p">());</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">groupEnd</span><span class="p">();</span> <span class="c1">// 그룹 끝</span>
<span class="p">};</span>
</code></pre></div></div> <p>마지막으로, middleware를 통해 액션에 따른 다양한 side-effect를 관리하는 응용 사례를 알아봅시다. 예를 들면, 특정 액션을 감지하면 웹소켓을 통해 서버에 실시간으로 데이터를 전송하는 것이 있습니다. 이때, 미들웨어에서 액션을 감지하여 웹소켓 API 호출을 효율적으로 관리할 수 있습니다.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">socket</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">webSocketMiddleware</span> <span class="o">=</span> <span class="nx">store</span> <span class="o">=&gt;</span> <span class="nx">next</span> <span class="o">=&gt;</span> <span class="nx">action</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">switch</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">case</span> <span class="dl">'</span><span class="s1">WS_CONNECT</span><span class="dl">'</span><span class="p">:</span>
            <span class="c1">// socket 연결</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">socket</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">socket</span><span class="p">.</span><span class="nf">close</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="nx">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">WebSocket</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="dl">'</span><span class="s1">WS_DISCONNECT</span><span class="dl">'</span><span class="p">:</span>
            <span class="c1">// socket 연결 종료</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">socket</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">socket</span><span class="p">.</span><span class="nf">close</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="nx">socket</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="dl">'</span><span class="s1">WS_SEND</span><span class="dl">'</span><span class="p">:</span>
            <span class="c1">// 서버로 메시지 보내기</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">socket</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">socket</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">));</span>
            <span class="p">}</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="nl">default</span><span class="p">:</span>
            <span class="k">return</span> <span class="nf">next</span><span class="p">(</span><span class="nx">action</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <p>이제 Redux 미들웨어를 어떻게 사용하고 활용할 수 있는지 보다 깊이 이해하셨을 거라 생각합니다. 미들웨어는 Redux에서의 강력한 도구로, 이를 잘 활용하면 애플리케이션의 비동기 처리 능력과 디버깅 요소를 효과적으로 관리할 수 있습니다.</p>]]></content><author><name></name></author><category term="프론트엔드"/><category term="Middleware"/><summary type="html"><![CDATA[Middleware in Redux: 효율적인 비동기 작업과 디버깅을 위한 필수 요소]]></summary></entry><entry><title type="html">Redux Saga를 이용한 비동기 처리와 효율적인 상태 관리 :React.js에서의 비동기 처리와 상태 관리를 향상시키는 방법</title><link href="https://sungrinhan.github.io/blog/2025/redux-saga%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC%EC%99%80-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%A0%9C%EB%AA%A9redux-saga-react.js%EC%97%90%EC%84%9C%EC%9D%98-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC%EC%99%80-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC%EB%A5%BC-%ED%96%A5%EC%83%81%EC%8B%9C%ED%82%A4%EB%8A%94-%EB%B0%A9%EB%B2%95/" rel="alternate" type="text/html" title="Redux Saga를 이용한 비동기 처리와 효율적인 상태 관리 :React.js에서의 비동기 처리와 상태 관리를 향상시키는 방법"/><published>2025-04-22T15:05:11+00:00</published><updated>2025-04-22T15:05:11+00:00</updated><id>https://sungrinhan.github.io/blog/2025/redux-saga%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC%EC%99%80-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%A0%9C%EB%AA%A9redux-saga:-react.js%EC%97%90%EC%84%9C%EC%9D%98-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC%EC%99%80-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC%EB%A5%BC-%ED%96%A5%EC%83%81%EC%8B%9C%ED%82%A4%EB%8A%94-%EB%B0%A9%EB%B2%95</id><content type="html" xml:base="https://sungrinhan.github.io/blog/2025/redux-saga%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC%EC%99%80-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%A0%9C%EB%AA%A9redux-saga-react.js%EC%97%90%EC%84%9C%EC%9D%98-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC%EC%99%80-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC%EB%A5%BC-%ED%96%A5%EC%83%81%EC%8B%9C%ED%82%A4%EB%8A%94-%EB%B0%A9%EB%B2%95/"><![CDATA[<h1 id="redux-saga-reactjs에서의-비동기-처리와-상태-관리를-향상시키는-방법">Redux Saga: React.js에서의 비동기 처리와 상태 관리를 향상시키는 방법</h1> <h2 id="redux-saga-소개">Redux Saga 소개</h2> <p>Redux Saga는 JavaScript 애플리케이션에서 부작용 (비동기 요청과 같이 결과가 애플리케이션의 상태에 의존하지 않는 함수)를 쉽게 관리할 수있는 라이브러리이다. 이것은 애플리케이션 사이드 이펙트, 즉 데이터 요청, 가상 액션에 응답, 브라우저 캐시 액세스 등을보다 쉽고 가독성이 좋게 만드는 데 실제로 도움이 된다.</p> <h2 id="redux-saga의-작동-방식">Redux Saga의 작동 방식</h2> <p>Redux Saga는 ES6 기능인 제너레이터를 사용하여 비동기일 수 있는 동작을 조정한다. 이 잘 설계된 조합은 비동기 코드의 읽기 쉽고 테스트하기 쉬운 작성을 가능하게 한다. 제너레이터는 기본적으로 함수가 중간에서 멈추고 다시 시작할 수있는 기능을 제공하므로, 코드의 비실질적인 부분 (비동기 요청들)을 순차적으로 겉보기 분명하게 구성할 수 있다.</p> <p>기본적으로 Redux Saga는 애플리케이션에서 발생하는 각 Redux 액션에 대응하는 Saga를 등록하고, 해당 액션을 감지하면 정의한 작업을 실행한다.</p> <h2 id="redux-saga-사용-예시">Redux Saga 사용 예시</h2> <p>Redux Saga는 애플리케이션 상태에 대한 사이드 이펙트를 관리하기 위해 사용된다. 비동기 작업을 처리하는 가장 일반적인 시나리오 중 하나는 API 호출을 보내는 것이다.</p> <p>기본적인 Redux Saga 사이드 이펙트로서 API 호출을 처리하는 코드 예시를 살펴보자.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">call</span><span class="p">,</span> <span class="nx">put</span><span class="p">,</span> <span class="nx">takeEvery</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">redux-saga/effects</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Api</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">...</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">// worker Saga: USER_FETCH_REQUESTED 액션에 응답하여 비동기 요청을 수행함</span>
<span class="kd">function</span><span class="o">*</span> <span class="nf">fetchUser</span><span class="p">(</span><span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">yield</span> <span class="nf">call</span><span class="p">(</span><span class="nx">Api</span><span class="p">.</span><span class="nx">fetchUser</span><span class="p">,</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">userId</span><span class="p">);</span>
    <span class="k">yield</span> <span class="nf">put</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">USER_FETCH_SUCCEEDED</span><span class="dl">"</span><span class="p">,</span> <span class="na">user</span><span class="p">:</span> <span class="nx">user</span> <span class="p">});</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">yield</span> <span class="nf">put</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">USER_FETCH_FAILED</span><span class="dl">"</span><span class="p">,</span> <span class="na">message</span><span class="p">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">message</span> <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span><span class="o">*</span> <span class="nf">mySaga</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="nf">takeEvery</span><span class="p">(</span><span class="dl">"</span><span class="s2">USER_FETCH_REQUESTED</span><span class="dl">"</span><span class="p">,</span> <span class="nx">fetchUser</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">mySaga</span><span class="p">;</span>
</code></pre></div></div> <p>위 예제에서 <code class="language-plaintext highlighter-rouge">fetchUser</code>라는 worker Saga는 <code class="language-plaintext highlighter-rouge">USER_FETCH_REQUESTED</code> 액션을 감지하면 실행된다. 이 saga는 Api 모듈의 <code class="language-plaintext highlighter-rouge">fetchUser</code> 함수에 <code class="language-plaintext highlighter-rouge">userId</code>를 전달하여 API 호출을 수행한다. API 요청이 성공하면 결과를 payload로 포함하는 <code class="language-plaintext highlighter-rouge">USER_FETCH_SUCCEEDED</code> 액션을 dispatch한다. 만약 API 요청이 실패하면, 에러 메시지를 payload로 포함하는 <code class="language-plaintext highlighter-rouge">USER_FETCH_FAILED</code> 액션을 dispatch한다.</p> <h2 id="redux-saga-활용-팁">Redux Saga 활용 팁</h2> <p>Redux Saga에서는 지연 (<code class="language-plaintext highlighter-rouge">delay</code>), 동시성 (병렬 작업 실행), 데버틀링 및 쓰로틀링, 비동기 호출 중단 (예: API 요청 취소)과 같은 고급 사이드 이펙트 관리 기능도 제공한다. 이런 기능들은 애플리케이션의 복잡성을 크게 줄여주며, 신뢰성과 사용성을 향상시키는 데 도움이 된다.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">all</span><span class="p">,</span> <span class="nx">call</span><span class="p">,</span> <span class="nx">put</span><span class="p">,</span> <span class="nx">takeEvery</span><span class="p">,</span> <span class="nx">delay</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">redux-saga/effects</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Api</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">...</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">// worker saga</span>
<span class="kd">function</span><span class="o">*</span> <span class="nf">fetchUser</span><span class="p">(</span><span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="k">yield</span> <span class="nf">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">yield</span> <span class="nf">call</span><span class="p">(</span><span class="nx">Api</span><span class="p">.</span><span class="nx">fetchUser</span><span class="p">,</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">userId</span><span class="p">);</span>
        <span class="k">yield</span> <span class="nf">put</span><span class="p">({</span><span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">USER_FETCH_SUCCEEDED</span><span class="dl">"</span><span class="p">,</span> <span class="na">user</span><span class="p">:</span> <span class="nx">user</span><span class="p">});</span>
    <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">yield</span> <span class="nf">put</span><span class="p">({</span><span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">USER_FETCH_FAILED</span><span class="dl">"</span><span class="p">,</span> <span class="na">message</span><span class="p">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// root saga</span>
<span class="kd">function</span><span class="o">*</span> <span class="nf">mySaga</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">yield</span> <span class="nf">all</span><span class="p">([</span>
        <span class="nf">takeEvery</span><span class="p">(</span><span class="dl">"</span><span class="s2">USER_FETCH_REQUESTED</span><span class="dl">"</span><span class="p">,</span> <span class="nx">fetchUser</span><span class="p">),</span>
        <span class="c1">// 다른 worker sagas를 등록할 수 있다</span>
    <span class="p">]);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">mySaga</span><span class="p">;</span>
</code></pre></div></div> <p>위 예제는 <code class="language-plaintext highlighter-rouge">delay</code>의 사용방법을 보여주는 고급 Redux Saga 코드의 한가지 예시이다.</p>]]></content><author><name></name></author><category term="프론트엔드"/><category term="Redux"/><summary type="html"><![CDATA[Redux Saga: React.js에서의 비동기 처리와 상태 관리를 향상시키는 방법]]></summary></entry><entry><title type="html">CSS Flexbox 기초</title><link href="https://sungrinhan.github.io/blog/2025/css-flexbox-%EA%B8%B0%EC%B4%88/" rel="alternate" type="text/html" title="CSS Flexbox 기초"/><published>2025-04-21T00:00:00+00:00</published><updated>2025-04-21T00:00:00+00:00</updated><id>https://sungrinhan.github.io/blog/2025/css-flexbox-%EA%B8%B0%EC%B4%88</id><content type="html" xml:base="https://sungrinhan.github.io/blog/2025/css-flexbox-%EA%B8%B0%EC%B4%88/"><![CDATA[<p>CSS <strong>Flexbox</strong>는 웹페이지 내의 객체들 간의 간격과 위치를 보다 유연하게 조정할 수 있는 웹 디자인 기법인 Responsive Design의 일환입니다. <strong>Flexbox</strong>는 ‘Flexible Box’의 줄임말로, 유연성을 바탕으로 웹페이지의 레이아웃을 쉽게 구성하는 데 사용됩니다. 이 포스트에서는 Flexbox의 기본 개념을 배우고 실제 코드 예시와 함께 실무에서 어떻게 활용할 수 있는지 살펴보겠습니다.</p> <p>Flexbox는 Flex Container와 Flex Items으로 구성되며, Flex Container 안에 있는 Flex Items의 배열을 조절합니다. Flexbox의 주요 속성은 다음과 같습니다:</p> <ol> <li><code class="language-plaintext highlighter-rouge">flex-direction</code> : 항목들이 배치될 주 축을 설정합니다. row(기본값), row-reverse, column, column-reverse 중 하나를 설정할 수 있습니다.</li> <li><code class="language-plaintext highlighter-rouge">justify-content</code> : 주 축의 공간 분배를 설정합니다.</li> <li><code class="language-plaintext highlighter-rouge">align-items</code> : 교차 축의 정렬을 설정합니다.</li> <li><code class="language-plaintext highlighter-rouge">flex-wrap</code> : 항목들을 한 줄에 강제 배치할지, 여러 줄로 나누어 배치할지 설정합니다.</li> <li><code class="language-plaintext highlighter-rouge">flex-flow</code> : flex-direction과 flex-wrap을 한번에 설정하는 단축 속성입니다.</li> <li><code class="language-plaintext highlighter-rouge">align-content</code> : 여러 줄 간의 간격 및 정렬을 설정합니다.</li> </ol> <p>실제 코드 예시를 살펴보겠습니다.</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.flex-container</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
    <span class="nl">flex-direction</span><span class="p">:</span> <span class="n">row</span><span class="p">;</span>
    <span class="nl">justify-content</span><span class="p">:</span> <span class="n">space-between</span><span class="p">;</span>
    <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
    <span class="nl">flex-wrap</span><span class="p">:</span> <span class="n">wrap</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>위 코드는 flex container를 설정하고, 그 안의 항목들을 행 방향으로 배치하되 각 항목 사이에 공간을 동일하게 배치하고, 아이템들이 가운데 정렬되도록 속성을 지정하였습니다. 만약 화면 너비가 아이템들을 한줄에 배치하기 충분하지 않으면, 새로운 줄로 아이템들이 배치됩니다.</p> <p>실무에서는 이런 방식으로 Navigation bar, Footer 등을 구현할 수 있습니다. 예를 들어, Navigation bar의 메뉴 아이템들이 항상 동일한 간격으로 배치되게 하거나, Footer의 내용물이 가운데 정렬되게끔 설정할 수 있습니다.</p> <p>회사 로고와 같이 어떤 특정 아이템만 유연성을 늘리거나 줄이고 싶다면, 해당 아이템에 <code class="language-plaintext highlighter-rouge">flex-grow</code>, <code class="language-plaintext highlighter-rouge">flex-shrink</code>, <code class="language-plaintext highlighter-rouge">flex-basis</code> 속성을 적용할 수 있습니다.</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.flex-item</span> <span class="p">{</span>
    <span class="nl">flex-grow</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span>
    <span class="nl">flex-shrink</span><span class="p">:</span> <span class="m">2</span><span class="p">;</span>
    <span class="nl">flex-basis</span><span class="p">:</span> <span class="nb">auto</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Flexbox는 이 외에도 다양한 속성들을 제공하고 있어, UI/UX를 효과적으로 디자인 할 수 있습니다.</p> <p>요약하자면, CSS Flexbox는 웹페이지의 레이아웃을 유연하게 구성하고, 화면 크기의 변화에 따라 그 레이아웃을 쉽게 바꾸어 줄 수 있는 강력한 도구입니다. Flex Container와 Flex Items의 특성을 이해하고, 속성들을 적절하게 활용한다면 화려하고 효율적인 웹페이지를 디자인할 수 있을 것입니다.</p>]]></content><author><name></name></author><category term="프론트엔드"/><category term="CSS"/><summary type="html"><![CDATA[CSS Flexbox는 웹페이지 내의 객체들 간의 간격과 위치를 보다 유연하게 조정할 수 있는 웹 디자인 기법인 Responsive Design의 일환입니다. Flexbox는 ‘Flexible Box’의 줄임말로, 유연성을 바탕으로 웹페이지의 레이아웃을 쉽게 구성하는 데 사용됩니다. 이 포스트에서는 Flexbox의 기본 개념을 배우고 실제 코드 예시와 함께 실무에서 어떻게 활용할 수 있는지 살펴보겠습니다.]]></summary></entry><entry><title type="html">JavaScript 프레임워크인 React.js 학습을 추천드립니다.</title><link href="https://sungrinhan.github.io/blog/2025/javascript-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%EC%9D%B8-react.js-%ED%95%99%EC%8A%B5%EC%9D%84-%EC%B6%94%EC%B2%9C%EB%93%9C%EB%A6%BD%EB%8B%88%EB%8B%A4/" rel="alternate" type="text/html" title="JavaScript 프레임워크인 React.js 학습을 추천드립니다."/><published>2025-04-21T00:00:00+00:00</published><updated>2025-04-21T00:00:00+00:00</updated><id>https://sungrinhan.github.io/blog/2025/javascript-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%EC%9D%B8-react.js-%ED%95%99%EC%8A%B5%EC%9D%84-%EC%B6%94%EC%B2%9C%EB%93%9C%EB%A6%BD%EB%8B%88%EB%8B%A4</id><content type="html" xml:base="https://sungrinhan.github.io/blog/2025/javascript-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%EC%9D%B8-react.js-%ED%95%99%EC%8A%B5%EC%9D%84-%EC%B6%94%EC%B2%9C%EB%93%9C%EB%A6%BD%EB%8B%88%EB%8B%A4/"><![CDATA[<p>React.js는 Facebook이 개발하고 관리하는 JavaScript 라이브러리로 User Interface (UI)를 만드는 데 집중되어 있습니다. React.js는 효율적으로 코딩을 할 수 있도록 도우며, 개발자들이 웹 애플리케이션을 좀더 쉽게 만들 수 있도록 해주는 특이한 특징들을 많이 가지고 있습니다.</p> <p>React 개발의 핵심 개념 중 하나는 컴포넌트입니다. 컴포넌트는 프로그래밍에서 코드를 재사용 가능하도록 만든 개별적인 코드 블록을 말합니다. 이러한 컴포넌트 개념 덕분에, 한 번 작성해 놓은 컴포넌트를 다른 프로젝트에도 재사용하거나, 필요에 따라 조합할 수 있습니다.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Welcome</span> <span class="kd">extends</span> <span class="nc">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nf">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span><span class="err">;
</span>  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Welcome</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">Sara</span><span class="dl">"</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">root</span><span class="dl">'</span><span class="p">));</span>
</code></pre></div></div> <p>위 코드는 React 컴포넌트를 정의하고 사용하는 방법을 보여줍니다. 여기서 ‘Welcome’이라는 이름의 컴포넌트를 정의하고 있으며, <code class="language-plaintext highlighter-rouge">ReactDOM.render</code>를 사용해 페이지에 컴포넌트를 렌더링 합니다.</p> <p>이런 컴포넌트 기반의 접근법은 유저 인터페이스를 쉽게 만들고, 유지 관리하며, 그리고 테스트 하는데 있어 많은 이점을 제공합니다.</p> <p>실무에서는 종종 다양한 데이터를 다루기 위해 React를 <code class="language-plaintext highlighter-rouge">Redux</code> 라는 라이브러리와 함께 사용합니다. Redux는 애플리케이션의 전체 상태를 저장하는 저장소를 제공하며, 이를 통해 컴포넌트 간의 데이터 전달을 더욱 용이하게 합니다.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createStore</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">redux</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">function</span> <span class="nf">counter</span><span class="p">(</span><span class="nx">state</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">switch </span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">INCREMENT</span><span class="dl">'</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">state</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">DECREMENT</span><span class="dl">'</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">state</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">store</span> <span class="o">=</span> <span class="nf">createStore</span><span class="p">(</span><span class="nx">counter</span><span class="p">);</span>
<span class="nx">store</span><span class="p">.</span><span class="nf">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">INCREMENT</span><span class="dl">'</span> <span class="p">});</span>
</code></pre></div></div> <p>응용 버전에서는 React를 웹뿐만 아니라 모바일 앱 개발에도 사용할 수 있는 <code class="language-plaintext highlighter-rouge">React Native</code>를 활용할 수 있습니다. 이를 통해 인터페이스의 일관성을 유지하면서도 플랫폼에 맞는 최적화된 경험을 제공할 수 있습니다.</p> <p>요약하자면, React.js는 사용하기 쉽고, 높은 확장성을 가진 프레임워크로서 개발자들에게 많은 이점을 제공합니다. 특히 컴포넌트를 사용한 재사용 가능한 코드 작성은 상당한 생산성 향상을 가져다 줍니다. 처음 시작하는 개발자들이라도 React.js의 도움을 받아 더 나은 웹 애플리케이션을 만들 수 있을 것입니다.</p>]]></content><author><name></name></author><category term="프론트엔드"/><category term="JavaScript"/><summary type="html"><![CDATA[React.js는 Facebook이 개발하고 관리하는 JavaScript 라이브러리로 User Interface (UI)를 만드는 데 집중되어 있습니다. React.js는 효율적으로 코딩을 할 수 있도록 도우며, 개발자들이 웹 애플리케이션을 좀더 쉽게 만들 수 있도록 해주는 특이한 특징들을 많이 가지고 있습니다.]]></summary></entry><entry><title type="html">React.js에 이어서 상태 관리 라이브러리인 Redux를 학습하는 것을 추천드립니다.</title><link href="https://sungrinhan.github.io/blog/2025/react.js%EC%97%90-%EC%9D%B4%EC%96%B4%EC%84%9C-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EC%9D%B8-redux%EB%A5%BC-%ED%95%99%EC%8A%B5%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%84-%EC%B6%94%EC%B2%9C%EB%93%9C%EB%A6%BD%EB%8B%88%EB%8B%A4/" rel="alternate" type="text/html" title="React.js에 이어서 상태 관리 라이브러리인 Redux를 학습하는 것을 추천드립니다."/><published>2025-04-21T00:00:00+00:00</published><updated>2025-04-21T00:00:00+00:00</updated><id>https://sungrinhan.github.io/blog/2025/react.js%EC%97%90-%EC%9D%B4%EC%96%B4%EC%84%9C-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EC%9D%B8-redux%EB%A5%BC-%ED%95%99%EC%8A%B5%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%84-%EC%B6%94%EC%B2%9C%EB%93%9C%EB%A6%BD%EB%8B%88%EB%8B%A4</id><content type="html" xml:base="https://sungrinhan.github.io/blog/2025/react.js%EC%97%90-%EC%9D%B4%EC%96%B4%EC%84%9C-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EC%9D%B8-redux%EB%A5%BC-%ED%95%99%EC%8A%B5%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%84-%EC%B6%94%EC%B2%9C%EB%93%9C%EB%A6%BD%EB%8B%88%EB%8B%A4/"><![CDATA[<h1 id="reactjs에-이어서-상태-관리-라이브러리인-redux를-학습하는-것을-추천드립니다">React.js에 이어서 상태 관리 라이브러리인 Redux를 학습하는 것을 추천드립니다.</h1> <p>리엑트를 배우고 나면 좋은 디자인 패턴을 숙지하고 그것을 코드로 옮기는데 도움이 되는 도구를 고르는 것이 중요합니다. Redux는 많은 개발자들이 애정하는 상태 관리 라이브러리입니다.</p> <h2 id="기본-개념">기본 개념</h2> <p>Redux는 JavaScript 앱을 위한 예측 가능한 상태 컨테이너입니다. Redux를 사용하면, 모든 상태 변화는 액션에 의해 발생하고, 이러한 액션은 순수한 함수인 리듀서에 의해 처리됩니다. 따라서 상태 변화는 중앙 집중화되고, ‘코드의 원인과 효과’를 쉽게 파악할 수 있습니다.</p> <p>Redux는 리엑트와 잘 어울리지만, 리엑트와 독립적으로 작동합니다. 그래서 다른 뷰 라이브러리와도 사용할 수 있습니다.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 액션 정의</span>
<span class="kd">const</span> <span class="nx">ADD_TODO</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">ADD_TODO</span><span class="dl">'</span>
<span class="kd">const</span> <span class="nx">TOGGLE_TODO</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">TOGGLE_TODO</span><span class="dl">'</span>


<span class="c1">// 액션 생성자</span>
<span class="kd">function</span> <span class="nf">addTodo</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nx">ADD_TODO</span><span class="p">,</span> <span class="nx">text</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">toggleTodo</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nx">TOGGLE_TODO</span><span class="p">,</span> <span class="nx">index</span> <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 리듀서</span>
<span class="kd">function</span> <span class="nf">todos</span><span class="p">(</span><span class="nx">state</span> <span class="o">=</span> <span class="p">[],</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">switch </span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nx">ADD_TODO</span><span class="p">:</span>
      <span class="k">return</span> <span class="p">[...</span><span class="nx">state</span><span class="p">,</span> <span class="p">{</span> <span class="na">text</span><span class="p">:</span> <span class="nx">action</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="na">completed</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}]</span>
    <span class="k">case</span> <span class="nx">TOGGLE_TODO</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">todo</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> 
        <span class="nx">index</span> <span class="o">===</span> <span class="nx">action</span><span class="p">.</span><span class="nx">index</span> 
          <span class="p">?</span> <span class="p">{...</span><span class="nx">todo</span><span class="p">,</span> <span class="na">completed</span><span class="p">:</span> <span class="o">!</span><span class="nx">todo</span><span class="p">.</span><span class="nx">completed</span><span class="p">}</span>
          <span class="p">:</span> <span class="nx">todo</span>
      <span class="p">)</span>
    <span class="k">default</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">state</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>이 예시에서 액션 객체는 사용자 또는 API 응답 등에서 생성하여 상태 업데이트를 촉발합니다.</p> <h2 id="실무에서의-활용-및-제언">실무에서의 활용 및 제언</h2> <p>Redux는 특히 대규모 애플리케이션에서 강력합니다. App 전체에서 요구하는 공통 상태를 관리하려면, Redux를 사용하는 것이 더 일관된 접근 방법을 제공합니다. 예를 들어, 여러분이 구현하는 쇼핑 카트가 어느 페이지에서든 눈에 띄게 표시돼야 한다면, Redux를 활용해 상태를 효율적으로 관리할 수 있습니다.</p> <h2 id="redux-응용">Redux 응용</h2> <p>Redux의 또 다른 장점은 다양한 미들웨어와 함께 사용할 수 있다는 것입니다. 예를 들어, <code class="language-plaintext highlighter-rouge">redux-thunk</code>는 비동기 액션의 처리를 돕습니다. 다른 미들웨어로는 <code class="language-plaintext highlighter-rouge">redux-saga</code>, <code class="language-plaintext highlighter-rouge">redux-observable</code> 등이 있습니다. 보다 고급스러운 상태 업데이트가 필요할 때 마다 이들 미들웨어를 적용해보세요.</p> <h2 id="정리">정리</h2> <p>Redux는 강력하고 유용한 상태 관리 도구입니다. 그러나 학습 곡선이 다소 가파른 편이므로, 뷰 라이브러리와 별개로 배워야 하는 점을 기억하세요. Redux를 학습하고 나면, 리엑트 앱은 더욱 강력해질 것입니다.</p>]]></content><author><name></name></author><category term="프론트엔드"/><category term="React.js에"/><summary type="html"><![CDATA[React.js에 이어서 상태 관리 라이브러리인 Redux를 학습하는 것을 추천드립니다.]]></summary></entry><entry><title type="html">a post with plotly.js</title><link href="https://sungrinhan.github.io/blog/2025/plotly/" rel="alternate" type="text/html" title="a post with plotly.js"/><published>2025-03-26T14:24:00+00:00</published><updated>2025-03-26T14:24:00+00:00</updated><id>https://sungrinhan.github.io/blog/2025/plotly</id><content type="html" xml:base="https://sungrinhan.github.io/blog/2025/plotly/"><![CDATA[<p>This is an example post with some <a href="https://plotly.com/javascript/">plotly</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}
</code></pre> <p>Also another example chart.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>This is how it looks like:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included plotly.js code could look like]]></summary></entry><entry><title type="html">a post with image galleries</title><link href="https://sungrinhan.github.io/blog/2024/photo-gallery/" rel="alternate" type="text/html" title="a post with image galleries"/><published>2024-12-04T01:59:00+00:00</published><updated>2024-12-04T01:59:00+00:00</updated><id>https://sungrinhan.github.io/blog/2024/photo-gallery</id><content type="html" xml:base="https://sungrinhan.github.io/blog/2024/photo-gallery/"><![CDATA[<p>The images in this post are all zoomable, arranged into different mini-galleries using different libraries.</p> <h2 id="lightbox2"><a href="https://lokeshdhakar.com/projects/lightbox2/">Lightbox2</a></h2> <p><a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p> <hr/> <h2 id="photoswipe"><a href="https://photoswipe.com/">PhotoSwipe</a></h2> <div class="pswp-gallery pswp-gallery--single-column" id="gallery--getting-started"> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-pswp-width="1669" data-pswp-height="2500" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg" alt=""/> </a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-2500.jpg" data-pswp-width="1875" data-pswp-height="2500" data-cropped="true" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-200.jpg" alt=""/> </a> <a href="https://unsplash.com" data-pswp-src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1666" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg" alt=""/> </a> <div> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1667" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg" alt=""/> </a> </div> </div> <hr/> <h2 id="spotlight-js"><a href="https://nextapps-de.github.io/spotlight/">Spotlight JS</a></h2> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/> </a> </div> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg"/> </a> </div> <hr/> <h2 id="venobox"><a href="https://veno.es/venobox/">Venobox</a></h2> <p><a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included image galleries could look like]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://sungrinhan.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://sungrinhan.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://sungrinhan.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024[[read-time]] min read We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry></feed>